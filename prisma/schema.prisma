// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rarity {
  id         Int    @id @default(autoincrement())
  name       String @unique
  startLevel Int
  maxLevel   Int
  Card       Card[]
}

model Card {
  id          Int     @id @default(autoincrement())
  supercellId Int
  isEvolution Boolean
  name        String
  elixirCost  Int?
  iconUrl     String
  rarityId    Int
  isSupport   Boolean
  Rarity      Rarity  @relation(fields: [rarityId], references: [id])
  Decks       Deck[]

  @@unique([supercellId, isEvolution])
}

model Deck {
  id   Int    @id @default(autoincrement())
  hash String @unique

  Cards      Card[]
  TeamMember TeamMember[]

  @@index([hash])
}

model GameMode {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Battle Battle[]
}

model Battle {
  id         Int      @id @default(autoincrement())
  gameModeId Int
  time       DateTime
  GameMode   GameMode @relation(fields: [gameModeId], references: [id])
  Team       Team[]

  @@index([time]) // Setzt einen Index auf die `time`-Spalte
}

//Ersetze crowns einfach durch ein Attribut "matchResult" mit dem Werten win, loss, draw
model Team {
  id         Int          @id @default(autoincrement())
  outcome    Outcome
  crowns     Int
  battleId   Int
  Battle     Battle       @relation(fields: [battleId], references: [id])
  TeamMember TeamMember[]
}

enum Outcome {
  WIN
  LOSS
  DRAW
}

model Player {
  tag         String       @id
  lastUpdated DateTime?
  TeamMember  TeamMember[]
}

model TeamMember {
  playerTag        String
  teamId           Int
  deckId           Int
  startingTrophies Int?

  Player Player @relation(fields: [playerTag], references: [tag])
  Team   Team   @relation(fields: [teamId], references: [id])
  Deck   Deck   @relation(fields: [deckId], references: [id])

  @@id([playerTag, teamId])
}
